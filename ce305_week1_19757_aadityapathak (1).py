# -*- coding: utf-8 -*-
"""CE305-week1-19757-AadityaPathak.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19nbA2s5o-9rd-jd5Moo0hrMbdi8B2fBv
"""

# Answer of 1



def base_conv(num, base, new_base):
    # Check for the validity of the number
    if not is_valid_number(num, base):
        return f"{num} is invalid for base {base}"

    # Convert the number to decimal
    decimal = convert_to_decimal(num, base)

    # Convert decimal to the new base
    result = convert_to_base(decimal, new_base)

    return result

def is_valid_number(num, base):
    # Check if each digit in num is less than the base
    for digit in num:
        if int(digit) >= base:
            return False
    return True

def convert_to_decimal(num, base):
    decimal = 0
    for digit in num:
        decimal = decimal * base + int(digit)
    return decimal

def convert_to_base(num, base):
    convert_string = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if num < base:
        return convert_string[num]
    else:
        return convert_to_base(num // base, base) + convert_string[num % base]

# Input from the user
num = input("Enter a number: ")
base = int(input("Enter the base of the number: "))
new_base = int(input("Enter the new base: "))

# Convert and display the result
result = base_conv(num, base, new_base)
print(f"Result: {result}")

#Answer of 2




def floating_model(floating_dec):
    # Convert the decimal number to binary representation
    binary = bin(abs(int(floating_dec)))[2:]  # Remove the "0b" prefix and convert to string
    binary = binary.zfill(5)  # Pad the binary string with leading zeros to make it 5 bits long

    # Convert the fractional part to binary representation
    fractional_part = abs(floating_dec) - abs(int(floating_dec))
    fractional_binary = ""
    for _ in range(8):
        fractional_part *= 2
        bit = int(fractional_part)
        fractional_binary += str(bit)
        fractional_part -= bit

    # Determine the sign bit
    sign_bit = '1' if floating_dec < 0 else '0'

    # Combine the sign bit, integer part, and fractional part to form the 14-bit binary representation
    binary_representation = f"{sign_bit}_{binary}_{fractional_binary}"

    return binary_representation

# Ask the user for a floating-point decimal number
try:
    floating_dec = float(input("Enter a floating-point decimal number: "))
except ValueError:
    print("Invalid input. Please enter a valid floating-point decimal number.")
else:
    binary_representation = floating_model(floating_dec)
    print(f"14-bit binary representation: {binary_representation}")